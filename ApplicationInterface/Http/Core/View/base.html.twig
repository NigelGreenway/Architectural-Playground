<head>
    <title>{% block title %}{% endblock %}</title>
    <style>
        input,
        button {
            display: block;
            width:   250px;
            padding: 5px 5px 5px 5px;
            margin:  5px 5px 5px 5px;
            background-color: #F5F5F5;
            border: 1px solid black;
        }
    </style>
</head>

<h1>Architecture Prototype demo</h1>

{% block body %}{% endblock %}

<script>
    /**
     * A Route Generator plugin for javascript to
     * generate routes dynamically
     *
     * @author Nigel Greenway <nigel_greenway@me.com>
     */
    (function (window, document) {

        /**
         * Get a built up version of the location with the protocol,
         * host and port
         *
         * @returns {string}
         */
        function getLocation() {
            var
                    protocol = window.location.protocol,
                    host     = window.location.hostname,
                    port     = window.location.port.length > 0 ? ':' + window.location.port : '';

            return protocol + '//' + host + port;
        };

        /**
         * Routing constructor
         *
         * @param routes
         *
         * @constructor
         */
        var Routing = function(routes) {
            this.routes   = JSON.parse(routes);
            this.location = getLocation();
        };

        /**
         * All methods for the Routing plugin
         *
         * @type \{\{generate: Function, buildRoute: Function, findRoute: Function}}
         */
        Routing.prototype = {

            /**
             * Generate a route from its alias and its parameters and the optional
             * absolute parameter
             *
             * @param {string}       alias
             * @param {object}       parameters
             * @param {boolean|null} absolute
             *
             * @returns {string}
             */
            generate: function (alias, parameters, absolute) {

                var absolute = absolute || false;

                if (absolute === true) {
                    return this.location + this.buildRoute(alias, this.findRoute(alias), parameters).join('/');
                }
                return this.buildRoute(alias, this.findRoute(alias), parameters).join('/');
            },

            /**
             * Build the route
             *
             * @param {string} alias
             * @param {array}  routeData
             * @param {object} parameters
             *
             * @returns {Array}
             */
            buildRoute: function (alias, routeData, parameters) {
                var elements = routeData['pattern'].split('/').map(function (element) {
                    if (element.match(/\{\w+}/g)) {
                        if (typeof parameters[element.match(/\w+/g)] == 'undefined') {
                            throw new Error('The route [' + alias + '] requires [' + element.match(/\w+/g)[0] + '] as a parameter.');
                        }
                        return parameters[element.match(/\w+/g)];
                    }
                    return element;
                });

                return elements;
            },

            /**
             * Find if the route exists in the routes array
             *
             * @param string alias
             *
             * @returns {*}
             */
            findRoute: function (alias) {
                if (typeof this.routes[alias] == 'undefined') {
                    throw new Error('The route [' + alias + '] does not exist or is not exposed');
                }
                return this.routes[alias];
            }
        };

        window.Routing = Routing;

    }) (window, document);

    (function(window, undefined) {

        "use strict";

        function initialise() {
            // Check if the client is [IE7+, FireFox, Chrome, Safari]
            if (window.XMLHttpRequest) {
                return new XMLHttpRequest();
            }
            // Otherwise the client is [IE5, IE6]
            return new ActiveXObject('Microsoft.XMLHTTP');
        }

        /**
         * The ajax helper class
         *
         * @type \{\{requestedWithHeader: string, get: Function}}
         */
        var Ajax = {

            requestedWithHeader: 'X-Requested-With',

            jsonPayload: 'application/json',
            formPayload: 'application/x-www-form-urlencoded',

            /**
             * Get the required resource
             *
             * @param url
             * @param callback
             *
             * @return Callback|void
             */
            get: function(url, callback)
            {
                var xmlHttp = initialise();

                xmlHttp.onreadystatechange = function()
                {
                    if (xmlHttp.readyState == 4) {
                        if (typeof callback != 'undefined') {
                            return callback(xmlHttp);
                        }
                    }
                }

                xmlHttp.open('GET', url, true);
                xmlHttp.setRequestHeader(this.requestedWithHeader, 'XMLHttpRequest');
                xmlHttp.setRequestHeader('Accept', contentType);
                xmlHttp.send();
            },

            /**
             * Post payload to the given url
             *
             * @param url
             * @param payload
             * @param callback
             * @param contentType
             *
             * @return Callback|void
             */
            post: function(url, payload, callback, contentType)
            {
                var
                        xmlHttp     = initialise(),
                        contentType = contentType || this.formPayload
                        ;

                xmlHttp.onreadystatechange = function()
                {
                    if (xmlHttp.readyState == 4) {
                        if (typeof callback != 'undefined') {
                            return callback(xmlHttp);
                        }
                    }
                }

                xmlHttp.open('POST', url, false);
                xmlHttp.setRequestHeader('Content-Type', contentType);
                xmlHttp.setRequestHeader(this.requestedWithHeader, 'XMLHttpRequest');
                xmlHttp.setRequestHeader('Accept', contentType);
                xmlHttp.send(payload);
            },

            /**
             * Put the payload onto the given url
             *
             * @param url
             * @param payload
             * @param callback
             * @param contentType
             *
             * @return Callback|void
             */
            put: function(url, payload, callback, contentType)
            {
                var
                        xmlHttp = initialise(),
                        contentType = contentType || this.formPayload
                        ;

                xmlHttp.onreadystatechange = function()
                {
                    if (xmlHttp.readyState == 4) {
                        if (typeof callback != 'undefined') {
                            return callback(xmlHttp);
                        }
                    }
                }

                xmlHttp.open('PUT', url, true);
                xmlHttp.setRequestHeader('Content-Type', contentType);
                xmlHttp.setRequestHeader('Accept', contentType);
                xmlHttp.setRequestHeader(this.requestedWithHeader, 'XMLHttpRequest');
                xmlHttp.send(payload);


            },

            /**
             * Send the payload onto the given url as a
             * PATCH.
             *
             * @param url
             * @param payload
             * @param callback
             * @param contentType
             *
             * @return Callback|void
             */
            patch: function(url, payload, callback, contentType)
            {
                var
                        xmlHttp = initialise(),
                        contentType = contentType || this.formPayload
                        ;

                xmlHttp.onreadystatechange = function()
                {
                    if (xmlHttp.readyState == 4) {
                        if (typeof callback != 'undefined') {
                            return callback(xmlHttp);
                        }
                    }
                }

                xmlHttp.open('PATCH', url, false);
                xmlHttp.setRequestHeader('Accept', contentType);
                xmlHttp.setRequestHeader('Content-Type', contentType);
                xmlHttp.setRequestHeader(this.requestedWithHeader, 'XMLHttpRequest');
                xmlHttp.send(payload);
            }
        }

        window.Ajax = Ajax;

    }) (window, document);

    var Router = new window.Routing('{{ getRoutes()|raw }}');
</script>

{% block js %}{% endblock %}